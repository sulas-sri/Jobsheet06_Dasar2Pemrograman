# 1
# Python program showing a use
# lamda function

# perfoming a addition of three number
x1 = (lamda x, y, z: (x + y) * z)(1, 2, 3)
print(x1)

# function using a lamda function
x2 = (lamda x, y, z: (x+y) if (z == 0) else (x * y))(1, 2, 3)
print(x2)

# 2
# Python code to illustrate cube of a number
# showing difference between def() and lamda()
def cube(y):
    return y*y*y;
    
g = lamda x: x*x*x
print(g(7))

print(cube(5))

# 3
# Python program perfoming
# operation using def()
def fun(x, y, z):
    return x*y+z
a = 1
b = 2
c = 3

# logical jump
d = fun(a, b, c)
print(d)

# Python program perfoming
# operation using lamda

d = (lamda x, y, z: x*y+z)(1, 2, 3)
print(d)

# 4
def func(x):
    if x == 1:
       return "one"
def func(x):
    elif x == 2:
       return "two"
def func(x):
    elif x == 3:
       return "three"
    else:
       return "ten"
num = func(3)
print(num)

# Python program showing use
# of lamda function
num = (lamda x: "one" if x == 1 else( "two" if x == 2
                      else ("three" if x == 3 else "then")))(3)
print(num)

# 5
# Python code to illustrate
# filter() with lamda()
li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]
final_list = list(filter(lamda x: (x%2 !=0) , li))
print(final_list)

# 6
# Python code to illustrate
# map() with lamda()
# to get double of a list.
li = [5, 7, 22, 97, 54, 62, 77, 23, 73, 61]
final_list = list(map(lamda x: x*2 , li))
print(final_list)

# 7
# Python code to illustrate
# reduce() with lamda()
# to get sum of a list
from functools import reduce
li = [5, 8, 10, 20, 50, 100]
sum = reduce((lamda x, y: x + y), li)
print (sum)
       
